import os
import sys

import numpy as np
from simf import run_app

from libensemble import Ensemble
from libensemble.alloc_funcs.{{ alloc_module }} import {{ alloc_function }} as alloc_f
from libensemble.executors import MPIExecutor
from libensemble.gen_funcs.{{ gen_module }} import {{ gen_function }} as gen_f
from libensemble.specs import AllocSpecs, ExitCriteria, GenSpecs, LibeSpecs, SimSpecs

if __name__ == "__main__":
    exctr = MPIExecutor()

    sim_app = "{{ sim_app }}"

    if not os.path.isfile(sim_app):
        sys.exit(f"Application not found: {sim_app}")

    exctr.register_app(full_path=sim_app, app_name="{{ app_ref }}")

    num_workers = {{ num_workers }}

    ensemble = Ensemble(nworkers=num_workers, executor=exctr)

    {{#input_file}}
    input_file = "{{ input_file }}"
    {{/input_file}}

    {{#sim_input_dir}}
    sim_input_dir = "{{ sim_input_dir }}"
    {{/sim_input_dir}}

    ensemble.libE_specs = LibeSpecs(
        gen_on_manager=True,
        sim_dirs_make=True,
        {{#input_file}}
        sim_dir_copy_files=[input_file],
        {{/input_file}}
        {{#sim_input_dir}}
        sim_input_dir=sim_input_dir,
        {{/sim_input_dir}}
    )

    ensemble.sim_specs = SimSpecs(
        sim_f=run_{{ app_ref }},
        inputs=["x"],
        outputs=[("f", float)],
        {{#has_template_vars}}
        {{#input_file_basename}}
        user={"input_filename": "{{ input_file_basename }}", "input_names": [{{ template_vars_list }}]},
        {{/input_file_basename}}
        {{^input_file_basename}}
        user={"input_filename": "{{ templated_filename }}", "input_names": [{{ template_vars_list }}]},
        {{/input_file_basename}}
        {{/has_template_vars}}
        {{^has_template_vars}}
        user={},
        {{/has_template_vars}}
    )

    n = {{ dimension }}
    {{#custom_gen_specs}}
    ensemble.gen_specs = GenSpecs(
{{{ custom_gen_specs }}}
    )
    {{/custom_gen_specs}}
    {{^custom_gen_specs}}
    ensemble.gen_specs = GenSpecs(
        gen_f=gen_f,
        inputs=[],
        persis_in=["sim_id", "f"],
        outputs=[("x", float, ({{ dimension }},))],
        user={
            "initial_batch_size": num_workers,
            "lb": {{ lb_array }},
            "ub": {{ ub_array }},
        },
    )
    {{/custom_gen_specs}}

    ensemble.alloc_specs = AllocSpecs(
        alloc_f=alloc_f,
        {{ alloc_specs_user }}
    )

    ensemble.exit_criteria = ExitCriteria(sim_max={{ max_sims }})

    ensemble.add_random_streams()
    H, persis_info, flag = ensemble.run()

    if ensemble.is_manager:
        print("First 3:", ensemble.H[['x', 'f']][:3])
        print("Last 3:", ensemble.H[['x', 'f']][-3:])
