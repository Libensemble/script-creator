{
  "persistent_aposmm.aposmm": "        gen_f=gen_f,\n        inputs=[],\n        persis_in=[\"sim_id\", \"x\", \"x_on_cube\", \"f\"],\n        outputs=[(\"x\", float, n), (\"x_on_cube\", float, n), (\"sim_id\", int),\n                 (\"local_min\", bool), (\"local_pt\", bool)],\n        user={\n            \"initial_sample_size\": num_workers,\n            \"localopt_method\": \"scipy_Nelder-Mead\",\n            \"opt_return_codes\": [0],\n            \"nu\": 1e-8,\n            \"mu\": 1e-8,\n            \"dist_to_bound_multiple\": 0.01,\n            \"max_active_runs\": 6,\n            \"lb\": np.full(n, -2),\n            \"ub\": np.full(n, 2)\n        }",
  "persistent_gpCAM.persistent_gpCAM": "        gen_f=gen_f,\n        inputs=[],\n        persis_in=[\"x\", \"f\", \"sim_id\"],\n        outputs=[(\"x\", float, (n,))],\n        user={\n            \"batch_size\": num_workers,\n            \"lb\": np.full(n, -2),\n            \"ub\": np.full(n, 2)\n        }",
  "persistent_gpCAM.persistent_gpCAM_covar": "        gen_f=gen_f,\n        inputs=[],\n        persis_in=[\"x\", \"f\", \"sim_id\"],\n        outputs=[(\"x\", float, (n,))],\n        user={\n            \"batch_size\": num_workers,\n            \"use_grid\": true,\n            \"final_gen_send\": true,\n            \"lb\": np.full(n, -2),\n            \"ub\": np.full(n, 2)\n        }",
  "persistent_sampling_var_resources.uniform_sample_with_procs_gpus": "        gen_f=gen_f,\n        inputs=[],\n        persis_in=[\"x\", \"f\", \"sim_id\"],\n        outputs=[(\"num_procs\", int), (\"num_gpus\", int), (\"x\", float, 2)],\n        user={\n            \"initial_batch_size\": num_workers,\n            \"max_procs\": num_workers,\n            \"lb\": np.full(n, -2),\n            \"ub\": np.full(n, 2)\n        }"
}